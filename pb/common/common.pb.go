// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common.proto

/*
Package common is a generated protocol buffer package.

It is generated from these files:
	common.proto

It has these top-level messages:
	Head
	CommonHead
	RetMsg
	VipSegment
	RealSrver
	ServiceID
	Service
*/
package common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 返回码
type RetCode int32

const (
	RetCode_RET_OK RetCode = 0
	// 通用返回码： -1 ~ -999;
	RetCode_E_PLUGIN              RetCode = -1
	RetCode_E_JOB_ID_EMPTY        RetCode = -2
	RetCode_E_START_OSPF          RetCode = -3
	RetCode_E_STOP_OSPF           RetCode = -4
	RetCode_E_GET_TASK            RetCode = -5
	RetCode_E_JOB_ID_EXIST        RetCode = -6
	RetCode_E_LD_ABNORMAL         RetCode = -7
	RetCode_ERR_ILLEGAL_PARAMETER RetCode = -8
	RetCode_ERR_INTERNAL_ERROR    RetCode = -9
	RetCode_ERR_TVSADM_FAILED     RetCode = -10
	RetCode_ERR_ADM_TIMEOUT       RetCode = -11
	RetCode_ERR_ILLEGAL_PARAM     RetCode = -12
	RetCode_ERR_LD_NO_DOUND       RetCode = -13
	RetCode_ERR_SET_NO_FOUND      RetCode = -14
	RetCode_E_INVAL               RetCode = -15
)

var RetCode_name = map[int32]string{
	0:   "RET_OK",
	-1:  "E_PLUGIN",
	-2:  "E_JOB_ID_EMPTY",
	-3:  "E_START_OSPF",
	-4:  "E_STOP_OSPF",
	-5:  "E_GET_TASK",
	-6:  "E_JOB_ID_EXIST",
	-7:  "E_LD_ABNORMAL",
	-8:  "ERR_ILLEGAL_PARAMETER",
	-9:  "ERR_INTERNAL_ERROR",
	-10: "ERR_TVSADM_FAILED",
	-11: "ERR_ADM_TIMEOUT",
	-12: "ERR_ILLEGAL_PARAM",
	-13: "ERR_LD_NO_DOUND",
	-14: "ERR_SET_NO_FOUND",
	-15: "E_INVAL",
}
var RetCode_value = map[string]int32{
	"RET_OK":                0,
	"E_PLUGIN":              -1,
	"E_JOB_ID_EMPTY":        -2,
	"E_START_OSPF":          -3,
	"E_STOP_OSPF":           -4,
	"E_GET_TASK":            -5,
	"E_JOB_ID_EXIST":        -6,
	"E_LD_ABNORMAL":         -7,
	"ERR_ILLEGAL_PARAMETER": -8,
	"ERR_INTERNAL_ERROR":    -9,
	"ERR_TVSADM_FAILED":     -10,
	"ERR_ADM_TIMEOUT":       -11,
	"ERR_ILLEGAL_PARAM":     -12,
	"ERR_LD_NO_DOUND":       -13,
	"ERR_SET_NO_FOUND":      -14,
	"E_INVAL":               -15,
}

func (x RetCode) Enum() *RetCode {
	p := new(RetCode)
	*p = x
	return p
}
func (x RetCode) String() string {
	return proto.EnumName(RetCode_name, int32(x))
}
func (x *RetCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RetCode_value, data, "RetCode")
	if err != nil {
		return err
	}
	*x = RetCode(value)
	return nil
}
func (RetCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 操作网段方式
type SegmentOpType int32

const (
	SegmentOpType_SET SegmentOpType = 0
	SegmentOpType_DEL SegmentOpType = 1
	SegmentOpType_GET SegmentOpType = 2
)

var SegmentOpType_name = map[int32]string{
	0: "SET",
	1: "DEL",
	2: "GET",
}
var SegmentOpType_value = map[string]int32{
	"SET": 0,
	"DEL": 1,
	"GET": 2,
}

func (x SegmentOpType) Enum() *SegmentOpType {
	p := new(SegmentOpType)
	*p = x
	return p
}
func (x SegmentOpType) String() string {
	return proto.EnumName(SegmentOpType_name, int32(x))
}
func (x *SegmentOpType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SegmentOpType_value, data, "SegmentOpType")
	if err != nil {
		return err
	}
	*x = SegmentOpType(value)
	return nil
}
func (SegmentOpType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type VipType int32

const (
	VipType_TVS VipType = 0
	VipType_TSV VipType = 1
)

var VipType_name = map[int32]string{
	0: "TVS",
	1: "TSV",
}
var VipType_value = map[string]int32{
	"TVS": 0,
	"TSV": 1,
}

func (x VipType) Enum() *VipType {
	p := new(VipType)
	*p = x
	return p
}
func (x VipType) String() string {
	return proto.EnumName(VipType_name, int32(x))
}
func (x *VipType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VipType_value, data, "VipType")
	if err != nil {
		return err
	}
	*x = VipType(value)
	return nil
}
func (VipType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// 头部
type Head struct {
	Seq              *uint64 `protobuf:"varint,1,req,name=seq" json:"seq,omitempty"`
	CmdType          *uint32 `protobuf:"varint,2,req,name=cmd_type,json=cmdType" json:"cmd_type,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Head) Reset()                    { *m = Head{} }
func (m *Head) String() string            { return proto.CompactTextString(m) }
func (*Head) ProtoMessage()               {}
func (*Head) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Head) GetSeq() uint64 {
	if m != nil && m.Seq != nil {
		return *m.Seq
	}
	return 0
}

func (m *Head) GetCmdType() uint32 {
	if m != nil && m.CmdType != nil {
		return *m.CmdType
	}
	return 0
}

// 通用头部
type CommonHead struct {
	Head             *Head  `protobuf:"bytes,1,req,name=head" json:"head,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CommonHead) Reset()                    { *m = CommonHead{} }
func (m *CommonHead) String() string            { return proto.CompactTextString(m) }
func (*CommonHead) ProtoMessage()               {}
func (*CommonHead) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CommonHead) GetHead() *Head {
	if m != nil {
		return m.Head
	}
	return nil
}

// 返回信息
type RetMsg struct {
	Retcode          *int32  `protobuf:"varint,1,opt,name=retcode,def=0" json:"retcode,omitempty"`
	Retmsg           *string `protobuf:"bytes,2,opt,name=retmsg" json:"retmsg,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RetMsg) Reset()                    { *m = RetMsg{} }
func (m *RetMsg) String() string            { return proto.CompactTextString(m) }
func (*RetMsg) ProtoMessage()               {}
func (*RetMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

const Default_RetMsg_Retcode int32 = 0

func (m *RetMsg) GetRetcode() int32 {
	if m != nil && m.Retcode != nil {
		return *m.Retcode
	}
	return Default_RetMsg_Retcode
}

func (m *RetMsg) GetRetmsg() string {
	if m != nil && m.Retmsg != nil {
		return *m.Retmsg
	}
	return ""
}

type VipSegment struct {
	Ip               *string  `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Mask             *uint32  `protobuf:"varint,2,opt,name=mask" json:"mask,omitempty"`
	Type             *VipType `protobuf:"varint,3,opt,name=type,enum=common.VipType,def=0" json:"type,omitempty"`
	Ispid            *uint32  `protobuf:"varint,4,opt,name=ispid" json:"ispid,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *VipSegment) Reset()                    { *m = VipSegment{} }
func (m *VipSegment) String() string            { return proto.CompactTextString(m) }
func (*VipSegment) ProtoMessage()               {}
func (*VipSegment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

const Default_VipSegment_Type VipType = VipType_TVS

func (m *VipSegment) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *VipSegment) GetMask() uint32 {
	if m != nil && m.Mask != nil {
		return *m.Mask
	}
	return 0
}

func (m *VipSegment) GetType() VipType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Default_VipSegment_Type
}

func (m *VipSegment) GetIspid() uint32 {
	if m != nil && m.Ispid != nil {
		return *m.Ispid
	}
	return 0
}

type RealSrver struct {
	Ip               *string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Port             *int32  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	RawWeight        *int32  `protobuf:"varint,3,opt,name=raw_weight,json=rawWeight" json:"raw_weight,omitempty"`
	CurWeight        *int32  `protobuf:"varint,4,opt,name=cur_weight,json=curWeight" json:"cur_weight,omitempty"`
	ActiveConns      *int32  `protobuf:"varint,5,opt,name=active_conns,json=activeConns" json:"active_conns,omitempty"`
	Host             *string `protobuf:"bytes,6,opt,name=host" json:"host,omitempty"`
	Vpcid            *int32  `protobuf:"varint,7,opt,name=vpcid" json:"vpcid,omitempty"`
	Vlanid           *int32  `protobuf:"varint,8,opt,name=vlanid" json:"vlanid,omitempty"`
	Healthy          *int32  `protobuf:"varint,9,opt,name=healthy" json:"healthy,omitempty"`
	ProbePort        *int32  `protobuf:"varint,10,opt,name=probe_port,json=probePort" json:"probe_port,omitempty"`
	RsFlag           *uint32 `protobuf:"varint,11,opt,name=rs_flag,json=rsFlag" json:"rs_flag,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RealSrver) Reset()                    { *m = RealSrver{} }
func (m *RealSrver) String() string            { return proto.CompactTextString(m) }
func (*RealSrver) ProtoMessage()               {}
func (*RealSrver) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RealSrver) GetIp() string {
	if m != nil && m.Ip != nil {
		return *m.Ip
	}
	return ""
}

func (m *RealSrver) GetPort() int32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return 0
}

func (m *RealSrver) GetRawWeight() int32 {
	if m != nil && m.RawWeight != nil {
		return *m.RawWeight
	}
	return 0
}

func (m *RealSrver) GetCurWeight() int32 {
	if m != nil && m.CurWeight != nil {
		return *m.CurWeight
	}
	return 0
}

func (m *RealSrver) GetActiveConns() int32 {
	if m != nil && m.ActiveConns != nil {
		return *m.ActiveConns
	}
	return 0
}

func (m *RealSrver) GetHost() string {
	if m != nil && m.Host != nil {
		return *m.Host
	}
	return ""
}

func (m *RealSrver) GetVpcid() int32 {
	if m != nil && m.Vpcid != nil {
		return *m.Vpcid
	}
	return 0
}

func (m *RealSrver) GetVlanid() int32 {
	if m != nil && m.Vlanid != nil {
		return *m.Vlanid
	}
	return 0
}

func (m *RealSrver) GetHealthy() int32 {
	if m != nil && m.Healthy != nil {
		return *m.Healthy
	}
	return 0
}

func (m *RealSrver) GetProbePort() int32 {
	if m != nil && m.ProbePort != nil {
		return *m.ProbePort
	}
	return 0
}

func (m *RealSrver) GetRsFlag() uint32 {
	if m != nil && m.RsFlag != nil {
		return *m.RsFlag
	}
	return 0
}

type ServiceID struct {
	Srvid            *string `protobuf:"bytes,1,opt,name=srvid" json:"srvid,omitempty"`
	Attachip         *string `protobuf:"bytes,2,opt,name=attachip" json:"attachip,omitempty"`
	Vport            *int32  `protobuf:"varint,3,opt,name=vport" json:"vport,omitempty"`
	Protocol         *int32  `protobuf:"varint,4,opt,name=protocol" json:"protocol,omitempty"`
	Vpcid            *int32  `protobuf:"varint,5,opt,name=vpcid" json:"vpcid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ServiceID) Reset()                    { *m = ServiceID{} }
func (m *ServiceID) String() string            { return proto.CompactTextString(m) }
func (*ServiceID) ProtoMessage()               {}
func (*ServiceID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ServiceID) GetSrvid() string {
	if m != nil && m.Srvid != nil {
		return *m.Srvid
	}
	return ""
}

func (m *ServiceID) GetAttachip() string {
	if m != nil && m.Attachip != nil {
		return *m.Attachip
	}
	return ""
}

func (m *ServiceID) GetVport() int32 {
	if m != nil && m.Vport != nil {
		return *m.Vport
	}
	return 0
}

func (m *ServiceID) GetProtocol() int32 {
	if m != nil && m.Protocol != nil {
		return *m.Protocol
	}
	return 0
}

func (m *ServiceID) GetVpcid() int32 {
	if m != nil && m.Vpcid != nil {
		return *m.Vpcid
	}
	return 0
}

type Service struct {
	Srvid            *string      `protobuf:"bytes,1,opt,name=srvid" json:"srvid,omitempty"`
	Attachip         *string      `protobuf:"bytes,2,opt,name=attachip" json:"attachip,omitempty"`
	Vport            *int32       `protobuf:"varint,3,opt,name=vport" json:"vport,omitempty"`
	Protocol         *int32       `protobuf:"varint,4,opt,name=protocol" json:"protocol,omitempty"`
	Vpcid            *int32       `protobuf:"varint,5,opt,name=vpcid" json:"vpcid,omitempty"`
	Family           *int32       `protobuf:"varint,6,opt,name=family" json:"family,omitempty"`
	Level            *int32       `protobuf:"varint,7,opt,name=level" json:"level,omitempty"`
	ProbeSwitch      *uint32      `protobuf:"varint,8,opt,name=probeSwitch" json:"probeSwitch,omitempty"`
	ProbeInterval    *uint32      `protobuf:"varint,9,opt,name=probeInterval" json:"probeInterval,omitempty"`
	KickInterval     *uint32      `protobuf:"varint,10,opt,name=kickInterval" json:"kickInterval,omitempty"`
	AliveInterval    *uint32      `protobuf:"varint,11,opt,name=aliveInterval" json:"aliveInterval,omitempty"`
	SvcId            *int32       `protobuf:"varint,12,opt,name=svc_id,json=svcId" json:"svc_id,omitempty"`
	ProbeTimeout     *uint32      `protobuf:"varint,13,opt,name=probeTimeout" json:"probeTimeout,omitempty"`
	Vlanid           *int32       `protobuf:"varint,14,opt,name=vlanid" json:"vlanid,omitempty"`
	SchType          *uint32      `protobuf:"varint,15,opt,name=sch_type,json=schType" json:"sch_type,omitempty"`
	SvcFlag          *uint32      `protobuf:"varint,16,opt,name=svc_flag,json=svcFlag" json:"svc_flag,omitempty"`
	SendProbeContext *string      `protobuf:"bytes,17,opt,name=sendProbeContext" json:"sendProbeContext,omitempty"`
	RecvProbeContext *string      `protobuf:"bytes,18,opt,name=recvProbeContext" json:"recvProbeContext,omitempty"`
	Rs               []*RealSrver `protobuf:"bytes,19,rep,name=rs" json:"rs,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Service) GetSrvid() string {
	if m != nil && m.Srvid != nil {
		return *m.Srvid
	}
	return ""
}

func (m *Service) GetAttachip() string {
	if m != nil && m.Attachip != nil {
		return *m.Attachip
	}
	return ""
}

func (m *Service) GetVport() int32 {
	if m != nil && m.Vport != nil {
		return *m.Vport
	}
	return 0
}

func (m *Service) GetProtocol() int32 {
	if m != nil && m.Protocol != nil {
		return *m.Protocol
	}
	return 0
}

func (m *Service) GetVpcid() int32 {
	if m != nil && m.Vpcid != nil {
		return *m.Vpcid
	}
	return 0
}

func (m *Service) GetFamily() int32 {
	if m != nil && m.Family != nil {
		return *m.Family
	}
	return 0
}

func (m *Service) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *Service) GetProbeSwitch() uint32 {
	if m != nil && m.ProbeSwitch != nil {
		return *m.ProbeSwitch
	}
	return 0
}

func (m *Service) GetProbeInterval() uint32 {
	if m != nil && m.ProbeInterval != nil {
		return *m.ProbeInterval
	}
	return 0
}

func (m *Service) GetKickInterval() uint32 {
	if m != nil && m.KickInterval != nil {
		return *m.KickInterval
	}
	return 0
}

func (m *Service) GetAliveInterval() uint32 {
	if m != nil && m.AliveInterval != nil {
		return *m.AliveInterval
	}
	return 0
}

func (m *Service) GetSvcId() int32 {
	if m != nil && m.SvcId != nil {
		return *m.SvcId
	}
	return 0
}

func (m *Service) GetProbeTimeout() uint32 {
	if m != nil && m.ProbeTimeout != nil {
		return *m.ProbeTimeout
	}
	return 0
}

func (m *Service) GetVlanid() int32 {
	if m != nil && m.Vlanid != nil {
		return *m.Vlanid
	}
	return 0
}

func (m *Service) GetSchType() uint32 {
	if m != nil && m.SchType != nil {
		return *m.SchType
	}
	return 0
}

func (m *Service) GetSvcFlag() uint32 {
	if m != nil && m.SvcFlag != nil {
		return *m.SvcFlag
	}
	return 0
}

func (m *Service) GetSendProbeContext() string {
	if m != nil && m.SendProbeContext != nil {
		return *m.SendProbeContext
	}
	return ""
}

func (m *Service) GetRecvProbeContext() string {
	if m != nil && m.RecvProbeContext != nil {
		return *m.RecvProbeContext
	}
	return ""
}

func (m *Service) GetRs() []*RealSrver {
	if m != nil {
		return m.Rs
	}
	return nil
}

func init() {
	proto.RegisterType((*Head)(nil), "common.Head")
	proto.RegisterType((*CommonHead)(nil), "common.CommonHead")
	proto.RegisterType((*RetMsg)(nil), "common.RetMsg")
	proto.RegisterType((*VipSegment)(nil), "common.VipSegment")
	proto.RegisterType((*RealSrver)(nil), "common.RealSrver")
	proto.RegisterType((*ServiceID)(nil), "common.ServiceID")
	proto.RegisterType((*Service)(nil), "common.Service")
	proto.RegisterEnum("common.RetCode", RetCode_name, RetCode_value)
	proto.RegisterEnum("common.SegmentOpType", SegmentOpType_name, SegmentOpType_value)
	proto.RegisterEnum("common.VipType", VipType_name, VipType_value)
}

func init() { proto.RegisterFile("common.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 953 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0xcb, 0x72, 0xdb, 0x36,
	0x14, 0x8d, 0xde, 0xd2, 0x95, 0xe4, 0x20, 0x68, 0xdc, 0xd0, 0x4e, 0xd2, 0x2a, 0x9a, 0x2e, 0x54,
	0x2f, 0x3c, 0x1d, 0x77, 0x97, 0x99, 0x2e, 0x18, 0x0b, 0x76, 0xd5, 0x50, 0x8f, 0x01, 0x61, 0xb5,
	0x5d, 0x61, 0x58, 0x10, 0x91, 0x38, 0xa6, 0x44, 0x86, 0xa4, 0xe9, 0xfa, 0x03, 0xfa, 0x27, 0xfd,
	0x96, 0xf6, 0x7b, 0xfa, 0x7e, 0x3f, 0x06, 0x20, 0x25, 0x5a, 0x75, 0xbb, 0xae, 0x57, 0xb8, 0xe7,
	0x9c, 0xab, 0x73, 0x80, 0x0b, 0x83, 0xd0, 0x11, 0xc1, 0x6a, 0x15, 0xac, 0x8f, 0xc3, 0x28, 0x48,
	0x02, 0x5c, 0xcf, 0xaa, 0xfe, 0xfb, 0x50, 0xfd, 0x50, 0x3a, 0x2e, 0x46, 0x50, 0x89, 0xe5, 0x6b,
	0xa3, 0xd4, 0x2b, 0x0f, 0xaa, 0x54, 0x2d, 0xf1, 0x01, 0x34, 0xc5, 0xca, 0xe5, 0xc9, 0x4d, 0x28,
	0x8d, 0x72, 0xaf, 0x3c, 0xe8, 0xd2, 0x86, 0x58, 0xb9, 0xec, 0x26, 0x94, 0xfd, 0x63, 0x80, 0x53,
	0xdd, 0xae, 0x5b, 0x7b, 0x50, 0x5d, 0x4a, 0xc7, 0xd5, 0xbd, 0xed, 0x93, 0xce, 0x71, 0xee, 0xa3,
	0x38, 0xaa, 0x99, 0xfe, 0x07, 0x50, 0xa7, 0x32, 0x19, 0xc7, 0x0b, 0xfc, 0x18, 0x1a, 0x91, 0x4c,
	0x44, 0xe0, 0x4a, 0xa3, 0xd4, 0x2b, 0x0d, 0x6a, 0xcf, 0x4b, 0xef, 0xd1, 0x0d, 0x82, 0xdf, 0x84,
	0x7a, 0x24, 0x93, 0x55, 0xbc, 0x30, 0xca, 0xbd, 0xd2, 0xa0, 0x45, 0xf3, 0xaa, 0xff, 0x1a, 0x60,
	0xee, 0x85, 0xb6, 0x5c, 0xac, 0xe4, 0x3a, 0xc1, 0x7b, 0x50, 0xf6, 0x42, 0xdd, 0xdd, 0xa2, 0x65,
	0x2f, 0xc4, 0x18, 0xaa, 0x2b, 0x27, 0xbe, 0xd4, 0x3d, 0x5d, 0xaa, 0xd7, 0xf8, 0x5d, 0xa8, 0xea,
	0xdc, 0x95, 0x5e, 0x69, 0xb0, 0x77, 0x82, 0x36, 0x91, 0x52, 0x2f, 0xd4, 0xfb, 0x79, 0x5e, 0x61,
	0x73, 0x9b, 0x6a, 0x09, 0x7e, 0x08, 0x35, 0x2f, 0x0e, 0x3d, 0xd7, 0xa8, 0xea, 0xfe, 0xac, 0xe8,
	0x7f, 0x59, 0x86, 0x16, 0x95, 0x8e, 0x6f, 0x47, 0xa9, 0x8c, 0xfe, 0xcd, 0x32, 0x0c, 0xa2, 0x44,
	0x5b, 0xd6, 0xa8, 0x5e, 0xe3, 0xa7, 0x00, 0x91, 0x73, 0xcd, 0xaf, 0xa5, 0xb7, 0x58, 0x26, 0xda,
	0xb8, 0x46, 0x5b, 0x91, 0x73, 0xfd, 0xb1, 0x06, 0x14, 0x2d, 0xae, 0xa2, 0x0d, 0x5d, 0xcd, 0x68,
	0x71, 0x15, 0xe5, 0xf4, 0x33, 0xe8, 0x38, 0x22, 0xf1, 0x52, 0xc9, 0x45, 0xb0, 0x5e, 0xc7, 0x46,
	0x4d, 0x0b, 0xda, 0x19, 0x76, 0xaa, 0x20, 0x65, 0xba, 0x0c, 0xe2, 0xc4, 0xa8, 0xeb, 0x18, 0x7a,
	0xad, 0xc2, 0xa7, 0xa1, 0xf0, 0x5c, 0xa3, 0xa1, 0xf5, 0x59, 0xa1, 0xce, 0x31, 0xf5, 0x9d, 0xb5,
	0xe7, 0x1a, 0x4d, 0x0d, 0xe7, 0x15, 0x36, 0xa0, 0xb1, 0x94, 0x8e, 0x9f, 0x2c, 0x6f, 0x8c, 0x96,
	0x26, 0x36, 0xa5, 0x4a, 0x17, 0x46, 0xc1, 0x67, 0x92, 0xeb, 0x6d, 0x41, 0x96, 0x4e, 0x23, 0x33,
	0xb5, 0xb7, 0x47, 0xd0, 0x88, 0x62, 0xfe, 0xca, 0x77, 0x16, 0x46, 0x5b, 0x9f, 0x52, 0x3d, 0x8a,
	0xcf, 0x7c, 0x67, 0xd1, 0xff, 0xa2, 0x04, 0x2d, 0x5b, 0x46, 0xa9, 0x27, 0xe4, 0x68, 0xa8, 0xd2,
	0xc4, 0x51, 0xea, 0xb9, 0xf9, 0x49, 0x65, 0x05, 0x3e, 0x84, 0xa6, 0x93, 0x24, 0x8e, 0x58, 0x7a,
	0x61, 0x3e, 0xd7, 0x6d, 0x9d, 0xe5, 0x57, 0x96, 0x95, 0x4d, 0x7e, 0x65, 0x77, 0x08, 0x4d, 0x7d,
	0x49, 0x45, 0xe0, 0xe7, 0x27, 0xb5, 0xad, 0x8b, 0x1d, 0xd7, 0x6e, 0xed, 0xb8, 0xff, 0x75, 0x15,
	0x1a, 0x79, 0x8e, 0xff, 0x2f, 0x85, 0x3a, 0xf7, 0x57, 0xce, 0xca, 0xf3, 0x6f, 0xf4, 0x8c, 0x6a,
	0x34, 0xaf, 0x94, 0xda, 0x97, 0xa9, 0xf4, 0x37, 0x53, 0xd2, 0x05, 0xee, 0x41, 0x5b, 0x9f, 0xb0,
	0x7d, 0xed, 0x25, 0x62, 0xa9, 0x47, 0xd5, 0xa5, 0xb7, 0x21, 0xfc, 0x0e, 0x74, 0x75, 0x39, 0x5a,
	0x27, 0x32, 0x4a, 0x1d, 0x5f, 0x4f, 0xad, 0x4b, 0x77, 0x41, 0xdc, 0x87, 0xce, 0xa5, 0x27, 0x2e,
	0xb7, 0x22, 0xd0, 0xa2, 0x1d, 0x4c, 0xfd, 0x92, 0xe3, 0x7b, 0x69, 0xf1, 0x4b, 0xd9, 0x18, 0x77,
	0x41, 0xbc, 0x0f, 0xf5, 0x38, 0x15, 0xdc, 0x73, 0x8d, 0x4e, 0x16, 0x34, 0x4e, 0xc5, 0xc8, 0x55,
	0x06, 0xda, 0x91, 0x79, 0x2b, 0x19, 0x5c, 0x25, 0x46, 0x37, 0x33, 0xb8, 0x8d, 0xdd, 0xba, 0x72,
	0x7b, 0x3b, 0x57, 0xee, 0x00, 0x9a, 0xb1, 0x58, 0x66, 0x8f, 0xc8, 0x7d, 0xdd, 0xd7, 0x88, 0xc5,
	0x52, 0x3d, 0x22, 0x9a, 0x4a, 0x45, 0x76, 0xab, 0x50, 0x4e, 0xa5, 0x42, 0x5d, 0x2b, 0x7c, 0x04,
	0x28, 0x96, 0x6b, 0x77, 0xa6, 0x1c, 0x4e, 0x83, 0x75, 0x22, 0x3f, 0x4f, 0x8c, 0x07, 0x7a, 0x68,
	0x77, 0x70, 0xa5, 0x8d, 0xa4, 0x48, 0x77, 0xb4, 0x38, 0xd3, 0xfe, 0x13, 0xc7, 0xcf, 0xa0, 0x1c,
	0xc5, 0xc6, 0x1b, 0xbd, 0xca, 0xa0, 0x7d, 0xf2, 0x60, 0xf3, 0x28, 0x6c, 0xff, 0xcd, 0x69, 0x39,
	0x8a, 0x8f, 0xbe, 0xaa, 0x40, 0x83, 0xca, 0xe4, 0x54, 0xbd, 0x47, 0x00, 0x75, 0x4a, 0x18, 0x9f,
	0xbe, 0x44, 0xf7, 0xf0, 0x3e, 0x34, 0x09, 0x9f, 0x59, 0x17, 0xe7, 0xa3, 0x09, 0xfa, 0x6b, 0xf3,
	0x57, 0xc2, 0x8f, 0x61, 0x8f, 0xf0, 0x8f, 0xa6, 0x2f, 0xf8, 0x68, 0xc8, 0xc9, 0x78, 0xc6, 0x3e,
	0x45, 0x7f, 0x16, 0xe4, 0x01, 0x74, 0x08, 0xb7, 0x99, 0x49, 0x19, 0x9f, 0xda, 0xb3, 0x33, 0xf4,
	0x47, 0x41, 0x19, 0xd0, 0x56, 0xd4, 0x74, 0x96, 0x31, 0xbf, 0x17, 0xcc, 0x23, 0x00, 0xc2, 0xcf,
	0x09, 0xe3, 0xcc, 0xb4, 0x5f, 0xa2, 0xdf, 0xfe, 0xc3, 0xea, 0x93, 0x91, 0xcd, 0xd0, 0xaf, 0x05,
	0x79, 0x08, 0x5d, 0xc2, 0xad, 0x21, 0x37, 0x5f, 0x4c, 0xa6, 0x74, 0x6c, 0x5a, 0xe8, 0x97, 0x82,
	0xeb, 0xc3, 0x3e, 0xa1, 0x94, 0x8f, 0x2c, 0x8b, 0x9c, 0x9b, 0x16, 0x9f, 0x99, 0xd4, 0x1c, 0x13,
	0x46, 0x28, 0xfa, 0xb9, 0xd0, 0xbc, 0x0d, 0x58, 0x6b, 0x26, 0x8c, 0xd0, 0x89, 0x69, 0x71, 0x42,
	0xe9, 0x94, 0xa2, 0x9f, 0x0a, 0xc1, 0x5b, 0xf0, 0x40, 0x09, 0xd8, 0xdc, 0x36, 0x87, 0x63, 0x7e,
	0x66, 0x8e, 0x2c, 0x32, 0x44, 0x3f, 0x16, 0xfc, 0x13, 0xb8, 0xaf, 0x78, 0x45, 0xb2, 0xd1, 0x98,
	0x4c, 0x2f, 0x18, 0xfa, 0xe1, 0x4e, 0xf7, 0x4e, 0x04, 0xf4, 0xfd, 0x9d, 0x6e, 0x6b, 0xc8, 0x27,
	0x53, 0x3e, 0x9c, 0x5e, 0x4c, 0x86, 0xe8, 0xbb, 0x82, 0x7d, 0x0a, 0x48, 0xb1, 0x36, 0x61, 0x8a,
	0x3e, 0xd3, 0xf4, 0xb7, 0x05, 0xfd, 0x10, 0x1a, 0x84, 0x8f, 0x26, 0x73, 0xd3, 0x42, 0xdf, 0x6c,
	0xd1, 0xa3, 0x23, 0xe8, 0xe6, 0x5f, 0x8c, 0x69, 0xa8, 0xef, 0x5b, 0x03, 0x2a, 0x36, 0x61, 0xe8,
	0x9e, 0x5a, 0x0c, 0x89, 0x85, 0x4a, 0x6a, 0x71, 0x4e, 0x18, 0x2a, 0x1f, 0x3d, 0x81, 0xe6, 0xe6,
	0xd3, 0xa0, 0x40, 0x36, 0xb7, 0x33, 0x19, 0xb3, 0xe7, 0xa8, 0xf4, 0x77, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x6d, 0x9d, 0x19, 0xd9, 0x39, 0x07, 0x00, 0x00,
}
